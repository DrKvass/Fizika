import scipy
import numpy as np
import matplotlib.pyplot as plt
#-----------------------------DATASTORAGE-----------------------------#

#vhodni podatki

tstart = 0
tend = 20

s_0 = 990
i_0 = 10
r_0 = 0

n = 1000
r0 = 2

#interval [0, 20] razdeli na 5000 delov

t = np.linspace(tstart,tend,5000)

#Variable za simuliranje spremembe r0 skozi cas

A = 0.6
B = 0.01
C = 0.00001

#-----------------------------PODNALOGA A-----------------------------#

def epidemijaAB(t, w, r0, n):
    s,i,r = w
    return [-r0/n*s*i, r0/n*s*i-i, i]

sol1 = scipy.integrate.solve_ivp(epidemijaAB, [tstart, tend], [s_0,i_0,r_0], t_eval = t, args=(r0,n), dense_output=True)

w = sol1.sol(t)
plt.plot(sol1.t, w.T[:,0], '-', c = 'red', label='s(t)')
plt.plot(sol1.t, w.T[:,1], '-', c = 'blue', label='i(t)')
plt.plot(sol1.t, w.T[:,2], '-', c = 'purple', label='r(t)')

plt.title("S, I, R : primer A")
plt.xlabel("Time")
plt.ylabel("Število ljudi")

plt.legend()
plt.grid()
plt.show()

#-----------------------------PODNALOGA B-----------------------------#

xos = []
yos = []


for r0 in range(11):
    
    sol1 = scipy.integrate.solve_ivp(epidemijaAB, [tstart, tend], [s_0,i_0,r_0], t_eval = t, args=(r0,n), dense_output=True)

    w = sol1.sol(t)
    a = (sol1.t,w.T[:,1])
    mm = max(a[1])
    xos.append(r0)
    yos.append(mm)

#-----------------------------drugi plot gr----------------------------#    
# --> Za vsak posamezni graf pokaže SIR graf
#
#    plt.plot(sol1.t, w.T[:,0], '-', c = 'red', label='s(t)')
#    plt.plot(sol1.t, w.T[:,1], '-', c = 'blue', label='i(t)')
#    plt.plot(sol1.t, w.T[:,2], '-', c = 'purple', label='r(t)')
#    plt.legend()
#    plt.title("S, I, R : primer B : r0 = " + str(r0))
#    plt.xlabel("Time")
#    plt.ylabel("Število ljudi")
#    plt.grid()
#    plt.show()


plt.plot(xos, yos, '--bo')
plt.title("Graf SIR modela : max( I(t) )[R0]")
plt.xlabel("R0")
plt.ylabel("Število okuženih")

plt.grid()
plt.show()


#-----------------------------PODNALOGA C-----------------------------#
def epidemijaC(t, w, n):
    s,i,r,r0 = w
    return [-r0/n*s*i, r0/n*s*i-i, i,  A-B*i-C*i*s]

r0 = 1.001

sol1 = scipy.integrate.solve_ivp(epidemijaC, [tstart, tend], [s_0,i_0,r_0,r0], t_eval = t, args=(n,), dense_output=True)

w = sol1.sol(t)
plt.plot(sol1.t, w.T[:,0], '-', c = 'red', label='s(t)')
plt.plot(sol1.t, w.T[:,1], '-', c = 'blue', label='i(t)')
plt.plot(sol1.t, w.T[:,2], '-', c = 'purple', label='r(t)')
plt.plot(sol1.t, w.T[:,3], '-', c = 'green', label="r_0(t)")

plt.title("S, I, R : primer C")
plt.xlabel("Time")
plt.ylabel("Število ljudi")

plt.legend()
plt.grid()
plt.show()

#--------------

plt.plot(sol1.t, w.T[:,3], '-', c = 'green', label = "r_0(t)")
plt.title("R_0(t)")
plt.xlabel("Time")
plt.ylabel("Številska vrednost")

plt.grid()
plt.show()